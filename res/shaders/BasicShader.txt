#shader vertex
#version 330 core
layout(location = 0) in vec3 in_Position;
layout(location = 1) in vec3 in_Colour;
layout(location = 2) in vec3 in_Normal;

out vec3 ex_Colour;
out vec3 ex_normal;
out vec3 ex_posToLight;
out vec3 ex_posToCamera;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightWorldPosition;

void main()
{
	gl_Position = projectionMatrix * viewMatrix * vec4(in_Position, 1.0f);

	//view space light position
	vec3 lightViewPosition = vec3(viewMatrix * vec4(lightWorldPosition, 1.0f));
	
	//only rotate/scale the normal TODO: this does not work for non-uniform scaling look up normal matrix
	//get viewspace normal
	ex_normal = mat3(viewMatrix) * in_Normal;

	//view space position of vertex
	vec3 viewVertexPosition = vec3(viewMatrix * vec4(in_Position, 1.0f));

	//view space vertex position -> light
	ex_posToLight = lightViewPosition - viewVertexPosition;

	//camera position is 0,0,0 in view space so just negate the vector to get the vector to camera
	ex_posToCamera = -viewVertexPosition;

	ex_Colour = in_Colour;
};

#shader fragment
#version 330 core

in vec3 ex_Colour;
in vec3 ex_normal;
in vec3 ex_posToLight;
in vec3 ex_posToCamera;

out vec4 out_Colour;

void main()
{
	//light	params
	vec3 AmbientI = vec3(1.0f, 0.7f, 0.2f);
	vec3 DiffuseI = vec3(1.0f, 0.7f, 0.2f);
	vec3 SpecularI = vec3(1.0f, 0.0f, 0.f);

	//material params
	vec3 ambientConstant  = vec3(0.2f, 0.2f, 0.2f);
	vec3 diffuseConstant  = vec3(0.5f, 0.5f, 0.5f);
	vec3 specularConstant = vec3(0.3f, 0.3f, 0.3f);
	float shininess = 16.f;

	// normalize vectors after interpolation
	vec3 L = normalize(ex_posToLight);
	vec3 V = normalize(ex_posToCamera);
	vec3 N = normalize(ex_normal);

	vec3 ambientTerm = AmbientI * ambientConstant;

	float NdotL = dot(N, L);

	if (NdotL <= 0.0f) {
		out_Colour.xyz = ambientTerm * ex_Colour;
	}
	else {
		vec3 diffuseTerm = NdotL * DiffuseI * diffuseConstant;
	
		vec3 specularTerm = vec3(0.f, 0.f, 0.f);
		vec3 R = reflect(-V, N);
		float RdotL = dot(R, L);
		if (RdotL > 0){
			specularTerm = pow(RdotL, shininess) * SpecularI * specularConstant;
		}

		out_Colour.xyz = (ambientTerm + diffuseTerm + specularTerm) * ex_Colour;
	}

	out_Colour.a = 1.0f;
};